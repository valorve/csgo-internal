#pragma once
#include "../../base_includes.hpp"
#include "../../../sdk/input.hpp"

namespace hvh {
	struct exploits_t {
		enum class e_type : hash_t {
			none = HASH("exploit-type:none"),
			doubletap = HASH("exploit-type:doubletap"),
			hideshot = HASH("exploit-type:hideshot"),
		};

		bool m_in_shift{};
		int m_last_shift_tick{};
		int m_recharge_ticks{};
		bool m_charged{};
		int m_charged_ticks{};
		bool m_need_recharge{};
		int m_shift_ticks{};
		int m_shift_cmd{};
		bool m_need_fix_tickbase{};
		bool m_should_choke{};

		int m_last_shift_cmd{};
		int m_last_skip{};
		bool m_last_skip_shift{};
		int m_last_skip_peek{};
		bool m_charging{};
		int m_dt_shots{};

		bool m_shot_in_queue{};
		bool m_breaking_lc{};

		e_type m_type{};
		e_type m_old_type{};

		struct {
			int m_value{};
			int m_command_number{};
			int m_shift_amount{};
			int m_command_diff{};
			bool m_restore_tickbase{};
			int m_simulation_ticks{};
		} m_tickbase;

		int get_exploit_bullets();
		void on_create_move(sdk::user_cmd_t* cmd);

		struct ping_backup_t {
			float m_curtime{};
			float m_frametime{};
			int m_tickcount{};
			float m_cs_frametime{};
		};

		ping_backup_t m_ping_data{};

		bool can_read_packets();
		void on_cl_move(bool final_tick);
		void on_post_shift();

		void fix_tickbase(sdk::user_cmd_t* cmd);
	};

	GLOBAL_DYNPTR(exploits_t, exploits);
} // namespace hvh